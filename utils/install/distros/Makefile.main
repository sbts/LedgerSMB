
DIST_VER=$(shell git log | head -1 | sed -e 's/commit \(.......\).*/\1/')
DIST_DIR=/tmp

.DEFAULT_GOAL := help

#FIXME: get a sane dir sorted for --local-lib
#       this will require adding explicit local-lib support to .psgi I'd think
#CPANM_args := --local-lib $(dir_LocalLib) --quiet --notest --installdeps
CPANM_args := $(dir_LocalLib) --quiet --notest --installdeps

# Lets try and work out what OS and DISTRO we are running on
# some usefull info here http://linuxmafia.com/faq/Admin/release-files.html
ifeq ($(OS),Windows_NT)
    OS := WIN32
    OSTYPE := WINDOWS
    $(error We currently don't support Windows via this makefile.)
else
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
        OS := LINUX
    endif
    ifeq ($(UNAME_S),FreeBSD)
        OS := FREEBSD
        OSTYPE := FREEBSD
    endif
    ifeq ($(UNAME_S),Darwin)
        OS := OSX
        OSTYPE := OSX
        OSDISTRO := DARWIN
    endif
    OSDISTRO := $(shell lsb_release -si | tr '[:lower:]' '[:upper:]')
    ifndef OSDISTRO
        UNAME_V := $(shell uname -v | tr '[:lower:]' '[:upper:]')
            ifneq (,$(findstring DEBIAN,$(UNAME_V)))
                OSDISTRO := DEBIAN
            endif
            ifneq (,$(findstring UBUNTU,$(UNAME_V)))
                OSDISTRO := UBUNTU
            endif
            ifneq (,$(findstring LINUXMINT,$(UNAME_V)))
                OSDISTRO := LINUXMINT
            endif
            ifneq (,$(findstring AMZN,$(UNAME_V)))
                OSDISTRO := AMAZONLINUX
            endif
        REDHAT_RELEASE_FILE := $(shell test -r /etc/redhat-release && cat /etc/redhat-release | tr '[:lower:]' '[:upper:]')
            ifneq (,$(findstring CENTOS,$(REDHAT_RELEASE_FILE)))
                OSDISTRO := CENTOS
            endif
            ifneq (,$(findstring FEDORA,$(REDHAT_RELEASE_FILE)))
                OSDISTRO := FEDORA
            endif
# the following are speculative, we need to confirm what is expected.
            ifneq (,$(findstring RHEL,$(REDHAT_RELEASE_FILE)))
                OSDISTRO := RHEL
            endif
            ifneq (,$(findstring REDHAT,$(REDHAT_RELEASE_FILE)))
                OSDISTRO := REDHAT
            endif
        SUSE_RELEASE_FILE := $(shell test -r /etc/suse-release && cat /etc/suse-release | tr '[:lower:]' '[:upper:]')
            ifneq (,$(findstring SUSE,$(SUSE_RELEASE_FILE)))
                OSDISTRO := SUSE
            endif
        MANDRAKE_RELEASE_FILE := $(shell test -r /etc/mandrake-release && cat /etc/mandrake-release | tr '[:lower:]' '[:upper:]')
            ifneq (,$(findstring MANDRAKE,$(MANDRAKE_RELEASE_FILE)))
                OSDISTRO := MANDRAKE
            endif
        OS_RELEASE_FILE := $(shell test -r /etc/os-release && cat /etc/os-release | tr '[:lower:]' '[:upper:]')
            ifneq (,$(findstring DEBIAN,$(OS_RELEASE_FILE)))
                xOSDISTRO := DEBIAN
            endif
            ifneq (,$(findstring SUSE,$(OS_RELEASE_FILE)))
                xOSDISTRO := SUSE
            endif
    endif
    ifneq (,$(filter DEBIAN UBUNTU LINUXMINT, $(OSDISTRO)))
        OSTYPE := DEBIAN
    endif
    ifneq (,$(filter SUSE, $(OSDISTRO)))
        OSTYPE := SUSE
    endif
    ifneq (,$(filter MANDRAKE, $(OSDISTRO)))
        OSTYPE := MANDRAKE
    endif
    ifneq (,$(filter GENTOO, $(OSDISTRO)))
        OSTYPE := GENTOO
    endif
# this filter is speculative, we need to confirm what is expected.
    ifneq (,$(filter REDHAT RHEL FEDORA CENTOS AMAZONLINUX, $(OSDISTRO)))
        OSTYPE := REDHAT
    endif
endif
    ifndef OSDISTRO
        $(warning We don't know what distro you are running so can't do anything special for it)
    endif
    ifndef OSTYPE
        $(warning We don't know what OSTYPE (eg: debian or redhat) you are running)
        $(warning Please report this on the mailing lists or IRC)
        $(warning http://ledgersmb.org/topics/support)
        $(warning OSTYPE   = $(OSTYPE))
        $(warning OSDISTRO = $(OSDISTRO))
        $(warning UNAME_V = $(UNAME_V))
        $(warning REDHAT_RELEASE_FILE = $(REDHAT_RELEASE_FILE))
        $(warning SUSE_RELEASE_FILE = $(SUSE_RELEASE_FILE))
        $(warning MANDRAKE_RELEASE_FILE = $(MANDRAKE_RELEASE_FILE))
        $(warning OS_RELEASE_FILE = $(OS_RELEASE_FILE))
        $(error exit)
    endif

ifeq ($(OSTYPE),WINDOWS)
include utils/install/distros/Makefile.windows
endif

ifeq ($(OSTYPE),FREEBSD)
include utils/install/distros/Makefile.freebsd
endif

ifeq ($(OSTYPE),OSX)
include utils/install/distros/Makefile.osx
endif

ifeq ($(OSTYPE),DEBIAN)
include utils/install/distros/Makefile.debian
endif

ifeq ($(OSTYPE),SUSE)
include utils/install/distros/Makefile.suse
endif

ifeq ($(OSTYPE),MANDRAKE)
include utils/install/distros/Makefile.mandrake
endif

ifeq ($(OSTYPE),GENTOO)
include utils/install/distros/Makefile.gentoo
endif

ifeq ($(OSTYPE),REDHAT)
include utils/install/distros/Makefile.redhat
endif


# make help
#   Simple Help on installing LedgerSMB and use of this Makefile
#   This should always remain the first target
#   The first target is the default when make is run with no arguments
define HELP
Help on installing LedgerSMB can be found in
  - README.md
  - http://ledgersmb.org/topic/installing-ledgersmb-15

The easiest way to use this makefile to install LedgerSMB is simply to run
  make all_depndencies
  make feature_PDF_utf8 # this is optional and is a large additional download
                        # see discussion about XeLaTeX and UTF8 at
                        # http://ledgersmb.org

Help on using this Makefile
  The following make targets are available
    - help         : This help text
    - dojo         : Builds the minified dojo blob we serve to clients
    - submodules   : Initialises and updates our git submodules
    - dist         : builds the release distribution archive
    - dependencies : Installs all dependencies including cpan ones. (except features)
                     Preferring system perl modules over cpan ones
                     It attempts to detect OS type if OSTYPE is not set
                     Valid OS types are
                        - debian
                        - redhat
                        - freebsd

    - all_dependencies : same as dependencies but adds all features except feature_PDF_utf8

    - cpan                    : installs any remaining perl dependancies using cpanm

    - feature_PDF             : Install system and cpan packages for generating PDF/Postscript output
    - feature_PDF_utf8        : Install system and cpan packages for UTF8 ouput in PDF/Postscript output
    - feature_OpenOffice      : Install system and cpan packages for generating OpenOffice output

    #############################################################
      The following targets would not normally be used manually
    #############################################################


    - essential           : Installs just the "can't do without these" dependencies
    - perlmodules         : Installs all known system packaged perl modules we depend on
    - feature_PDF         : Installs system packages for generating PDF/Postscript output
    - feature_PDF_utf8    : Installs the system equivalent of texlive-xetex to allow UTF8 ouput in PDF/Postscript output
    - feature_OpenOffice  : Installs system packages for generating OpenOffice output
    - dependencies_dojo   : Installs system packages required to build our minified dojo

endef
export HELP

help:
	@echo "$$HELP"
	$(warning OSTYPE   = $(OSTYPE))
	$(warning OSDISTRO = $(OSDISTRO))
	$(warning REDHAT_RELEASE_FILE = $(REDHAT_RELEASE_FILE))

# make dojo
#   builds dojo for production/release
dojo: $(dependencies_dojo)
	rm -rf UI/js/;
	cd UI/js-src/lsmb/ \
            && ../util/buildscripts/build.sh --profile lsmb.profile.js \
            | egrep -v 'warn\(224\).*A plugin dependency was encountered but there was no build-time plugin resolver. module: (dojo/request;|dojo/request/node;|dojo/request/registry;|dijit/Fieldset;|dijit/RadioMenuItem;|dijit/Tree;|dijit/form/_RadioButtonMixin;)';
	git checkout -- UI/js/README;
	@echo "\n\nDon't forget to set ledgersmb.conf dojo_built=1\n";

#make submodules
#   Initialises and updates our git submodules
submodules:
	git submodule update --init --recursive

# make dist
#   builds release distribution archive
dist: dojo
	test -d $(DIST_DIR) || mkdir -p $(DIST_DIR)
	find . | grep -vE '^.$$|/\.git|^\./UI/js-src/(dojo|dijit|util)/|\.uncompressed\.js$$|.js.map$$' | tar czf $(DIST_DIR)/ledgersmb-$(DIST_VER).tar.gz --transform 's,^./,ledgersmb/,' --no-recursion --files-from -


#   make dependencies
#       installs all dependencies
dependencies: essential perlmodules cpan
#   make all
#       installs dependencies Including all features except feature_PDF_utf8
all_dependencies: dependencies feature_PDF feature_OpenOffice
#   make essential
#       installs just the "can't do without these" dependencies
essential:
	$(installer) $(PKGS_essential)
#   make perlmodules
#       installs all known deb packaged perl modules we depend on
perlmodules:
	$(installer) $(PKGS_perlmodules)
#   make feature_PDF
#       installs deb packages for generating PDF/Postscript output
feature_PDF:
	$(installer) $(PKGS_feature_PDF)
	cpanm --with-feature=latex-pdf-ps --with-feature=latex-pdf-images $(CPANM_args) .
#   make feature_PDF_utf8
#       Installs texlive-xetex to allow UTF8 ouput in PDF/Postscript output
feature_PDF_utf8: feature_PDF
	$(installer) $(PKGS_feature_PDF_utf8)
#   make feature_OpenOffice
#       Installs deb package for generating OpenOffice output
feature_OpenOffice:
	$(installer) $(PKGS_feature_OpenOffice)
	cpanm --with-feature=openoffice $(CPANM_args) .


#   make cpan
#       installs any remaining perl dependancies using cpanm
cpan:
	cpanm --with-feature=starman $(CPANM_args) .

postgres_user:
	sudo createuser -S -d -r -l -P lsmb_dbadmin

########
# todo list
########
# The next targets to add are likely
########
# - postgres_user
# - postgres_access
# - postgres_verify
# - postgres (depends on postgres_*)
# 
# - starman (adds system user and systemd script)
# 
# - letsencrypt
# 
# - nginx
# 
# - apache
# - httpd (defaults to nginx)
# Oh, and the first to add would be
# - configure (asks a couple of questions and generates ledgersmb.conf)

########
# I think the list of things to test would be something like....
########
# These tests should be run for each distro in a clean VM either on demand or as part of "release testing"
# - run DB tests
# - create an invoice
# - Run a test that verifies Dojo has loaded and is able to modify the DOM
# - generate PDF of invoice
# - generate OpenOffice Doc of invoice
# - Use Mountebank to send an email of the invoice
